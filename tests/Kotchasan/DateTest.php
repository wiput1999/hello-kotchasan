<?php

namespace Kotchasan;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-03-30 at 22:10:24.
 */
class DateTest extends \PHPUnit_Framework_TestCase
{
  /**
   * @var Date
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new Date();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {

  }

  /**
   * Generated from @assert (mktime(0, 0, 0, 2, 1, 2016), mktime(0, 0, 0, 3, 1, 2016)) [==]  array('days' => 29, 'year' => 0,'month' => 1, 'day' => 0).
   *
   * @covers Kotchasan\Date::compare
   */
  public function testCompare()
  {

    $this->assertEquals(
      array('days' => 29, 'year' => 0, 'month' => 1, 'day' => 0),
      \Kotchasan\Date::compare(mktime(0, 0, 0, 2, 1, 2016), mktime(0, 0, 0, 3, 1, 2016))
    );
  }

  /**
   * Generated from @assert ('2016-3-1', '2016-2-1') [==]  array('days' => -29, 'year' => 0,'month' => 1, 'day' => 0).
   *
   * @covers Kotchasan\Date::compare
   */
  public function testCompare2()
  {

    $this->assertEquals(
      array('days' => -29, 'year' => 0, 'month' => 1, 'day' => 0),
      \Kotchasan\Date::compare('2016-3-1', '2016-2-1')
    );
  }

  /**
   * Generated from @assert ('08:00', '09:00') [==] 3600.
   *
   * @covers Kotchasan\Date::timeDiff
   */
  public function testTimeDiff()
  {

    $this->assertEquals(
      3600,
      \Kotchasan\Date::timeDiff('08:00', '09:00')
    );
  }

  /**
   * Generated from @assert (0) [==] 'อา.'.
   *
   * @covers Kotchasan\Date::dateName
   */
  public function testDateName()
  {

    $this->assertEquals(
      'อา.',
      \Kotchasan\Date::dateName(0)
    );
  }

  /**
   * Generated from @assert (0, false) [==] 'อาทิตย์'.
   *
   * @covers Kotchasan\Date::dateName
   */
  public function testDateName2()
  {

    $this->assertEquals(
      'อาทิตย์',
      \Kotchasan\Date::dateName(0, false)
    );
  }

  /**
   * Generated from @assert (mktime(0, 0, 0, 2, 29, 2016)) [==]  29.
   *
   * @covers Kotchasan\Date::day
   */
  public function testDay()
  {

    $this->assertEquals(
      29,
      \Kotchasan\Date::day(mktime(0, 0, 0, 2, 29, 2016))
    );
  }

  /**
   * Generated from @assert (0) [!=]  ''.
   *
   * @covers Kotchasan\Date::format
   */
  public function testFormat()
  {

    $this->assertNotEquals(
      '',
      \Kotchasan\Date::format(0)
    );
  }

  /**
   * Generated from @assert (null) [==]  ''.
   *
   * @covers Kotchasan\Date::format
   */
  public function testFormat2()
  {

    $this->assertEquals(
      '',
      \Kotchasan\Date::format(null)
    );
  }

  /**
   * Generated from @assert (1454259600, 'Y-m-d H:i:s') [==] '2559-02-01 00:00:00'.
   *
   * @covers Kotchasan\Date::format
   */
  public function testFormat3()
  {

    $this->assertEquals(
      '2559-02-01 00:00:00',
      \Kotchasan\Date::format(1454259600, 'Y-m-d H:i:s')
    );
  }

  /**
   * Generated from @assert (1453522271) [==]  date('Y-m-d', 1453522271).
   *
   * @covers Kotchasan\Date::mktimeToSqlDate
   */
  public function testMktimeToSqlDate()
  {

    $this->assertEquals(
      date('Y-m-d', 1453522271),
           \Kotchasan\Date::mktimeToSqlDate(1453522271)
    );
  }

  /**
   * Generated from @assert (1454259600) [==] '2016-02-01 00:00:00'.
   *
   * @covers Kotchasan\Date::mktimeToSqlDateTime
   */
  public function testMktimeToSqlDateTime()
  {

    $this->assertEquals(
      '2016-02-01 00:00:00',
      \Kotchasan\Date::mktimeToSqlDateTime(1454259600)
    );
  }

  /**
   * Generated from @assert (mktime(0, 0, 0, 2, 29, 2016)) [==]  2.
   *
   * @covers Kotchasan\Date::month
   */
  public function testMonth()
  {

    $this->assertEquals(
      2,
      \Kotchasan\Date::month(mktime(0, 0, 0, 2, 29, 2016))
    );
  }

  /**
   * Generated from @assert (1) [==] 'ม.ค.'.
   *
   * @covers Kotchasan\Date::monthName
   */
  public function testMonthName()
  {

    $this->assertEquals(
      'ม.ค.',
      \Kotchasan\Date::monthName(1)
    );
  }

  /**
   * Generated from @assert (1, false) [==] 'มกราคม'.
   *
   * @covers Kotchasan\Date::monthName
   */
  public function testMonthName2()
  {

    $this->assertEquals(
      'มกราคม',
      \Kotchasan\Date::monthName(1, false)
    );
  }

  /**
   * Generated from @assert ('2016-02-01 00:00:00') [==] 1454259600.
   *
   * @covers Kotchasan\Date::sqlDateTimeToMktime
   */
  public function testSqlDateTimeToMktime()
  {

    $this->assertEquals(
      1454259600,
      \Kotchasan\Date::sqlDateTimeToMktime('2016-02-01 00:00:00')
    );
  }

  /**
   * Generated from @assert (mktime(0, 0, 0, 2, 29, 2016)) [==]  2016.
   *
   * @covers Kotchasan\Date::year
   */
  public function testYear()
  {

    $this->assertEquals(
      2016,
      \Kotchasan\Date::year(mktime(0, 0, 0, 2, 29, 2016))
    );
  }

  /**
   * @covers Kotchasan\Date::i18nYear
   * @todo   Implement testI18nYear().
   */
  public function testI18nYear()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Kotchasan\Date::parse
   * @todo   Implement testParse().
   */
  public function testParse()
  {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }
}